from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DownstreamApiResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code=None, headers=None, content=None):  # noqa: E501
        """DownstreamApiResult - a model defined in OpenAPI

        :param status_code: The status_code of this DownstreamApiResult.  # noqa: E501
        :type status_code: int
        :param headers: The headers of this DownstreamApiResult.  # noqa: E501
        :type headers: Dict[str, List[str]]
        :param content: The content of this DownstreamApiResult.  # noqa: E501
        :type content: str
        """
        self.openapi_types = {
            'status_code': int,
            'headers': Dict[str, List[str]],
            'content': str
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'headers': 'headers',
            'content': 'content'
        }

        self._status_code = status_code
        self._headers = headers
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'DownstreamApiResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DownstreamApiResult of this DownstreamApiResult.  # noqa: E501
        :rtype: DownstreamApiResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self) -> int:
        """Gets the status_code of this DownstreamApiResult.


        :return: The status_code of this DownstreamApiResult.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code: int):
        """Sets the status_code of this DownstreamApiResult.


        :param status_code: The status_code of this DownstreamApiResult.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    @property
    def headers(self) -> Dict[str, List[str]]:
        """Gets the headers of this DownstreamApiResult.


        :return: The headers of this DownstreamApiResult.
        :rtype: Dict[str, List[str]]
        """
        return self._headers

    @headers.setter
    def headers(self, headers: Dict[str, List[str]]):
        """Sets the headers of this DownstreamApiResult.


        :param headers: The headers of this DownstreamApiResult.
        :type headers: Dict[str, List[str]]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")  # noqa: E501

        self._headers = headers

    @property
    def content(self) -> str:
        """Gets the content of this DownstreamApiResult.


        :return: The content of this DownstreamApiResult.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this DownstreamApiResult.


        :param content: The content of this DownstreamApiResult.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content
