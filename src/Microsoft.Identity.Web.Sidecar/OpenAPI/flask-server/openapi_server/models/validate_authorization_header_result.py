from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateAuthorizationHeaderResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol=None, token=None, claims=None):  # noqa: E501
        """ValidateAuthorizationHeaderResult - a model defined in OpenAPI

        :param protocol: The protocol of this ValidateAuthorizationHeaderResult.  # noqa: E501
        :type protocol: str
        :param token: The token of this ValidateAuthorizationHeaderResult.  # noqa: E501
        :type token: str
        :param claims: The claims of this ValidateAuthorizationHeaderResult.  # noqa: E501
        :type claims: object
        """
        self.openapi_types = {
            'protocol': str,
            'token': str,
            'claims': object
        }

        self.attribute_map = {
            'protocol': 'protocol',
            'token': 'token',
            'claims': 'claims'
        }

        self._protocol = protocol
        self._token = token
        self._claims = claims

    @classmethod
    def from_dict(cls, dikt) -> 'ValidateAuthorizationHeaderResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValidateAuthorizationHeaderResult of this ValidateAuthorizationHeaderResult.  # noqa: E501
        :rtype: ValidateAuthorizationHeaderResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self) -> str:
        """Gets the protocol of this ValidateAuthorizationHeaderResult.


        :return: The protocol of this ValidateAuthorizationHeaderResult.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this ValidateAuthorizationHeaderResult.


        :param protocol: The protocol of this ValidateAuthorizationHeaderResult.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def token(self) -> str:
        """Gets the token of this ValidateAuthorizationHeaderResult.


        :return: The token of this ValidateAuthorizationHeaderResult.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this ValidateAuthorizationHeaderResult.


        :param token: The token of this ValidateAuthorizationHeaderResult.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def claims(self) -> object:
        """Gets the claims of this ValidateAuthorizationHeaderResult.


        :return: The claims of this ValidateAuthorizationHeaderResult.
        :rtype: object
        """
        return self._claims

    @claims.setter
    def claims(self, claims: object):
        """Sets the claims of this ValidateAuthorizationHeaderResult.


        :param claims: The claims of this ValidateAuthorizationHeaderResult.
        :type claims: object
        """
        if claims is None:
            raise ValueError("Invalid value for `claims`, must not be `None`")  # noqa: E501

        self._claims = claims
