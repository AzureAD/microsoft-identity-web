# template-restore-build-MSIdentityWeb.yaml
# Performs Nuget Restore and Build of MicrosoftIdentityWeb.sln based on BuildConfiguration

parameters:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'debug'
  MicrosoftIdentityWebVersion: '1.0.0-devopsbuild'

steps:
- script: |
    dotnet workload restore $(IdWebSourceDir)tests\DevApps\blazorwasm-b2c\blazorwasm2-b2c.csproj
  displayName: 'Install wasm-tools'

- powershell: |
    $nugetSourceIsExternal = (dotnet nuget list source --format Short).Contains("https://api.nuget.org/v3/index.json")
    if ($nugetSourceIsExternal) {
        dotnet nuget remove source NuGet
        dotnet nuget add source https://identitydivision.pkgs.visualstudio.com/_packaging/IDDP/nuget/v3/index.json -n IDDP
        dotnet nuget list source
    }
  displayName: 'Remove external "NuGet" Source and add "IDDP artifacts" as a NuGet Source, if needed.'

- task: DotNetCoreCLI@2
  displayName: 'Build solution Microsoft.Identity.Web.sln'
  inputs:
    command: 'custom'
    custom: 'build'
    projects: '$(IdWebSourceDir)Microsoft.Identity.Web.sln'
    arguments: '-p:configuration=${{ parameters.BuildConfiguration }} -p:RunCodeAnalysis=true -p:MicrosoftIdentityWebVersion=${{ parameters.MicrosoftIdentityWebVersion }} -p:SourceLinkCreate=true'

# This task is needed so that the 1CS Rolsyn analyzers task works.
# The previous task does the restore
- task: DotNetCoreCLI@2
  displayName: 'Build solution Microsoft.Identity.Web.sln for governance'
  condition: and(succeeded(), eq(variables['PipelineType'], 'Legacy'))
  inputs:
    command: custom
    custom: msbuild
    feedsToUse: 'config'
    nugetConfigPath: NuGet.config
    project: '$(IdWebSourceDir)Microsoft.Identity.Web.sln'
    arguments: '-p:configuration=${{ parameters.BuildConfiguration }} -p:RunCodeAnalysis=false -p:MicrosoftIdentityWebVersion=${{ parameters.MicrosoftIdentityWebVersion }} -p:SourceLinkCreate=true'

# Run the dotnet daemon app
# This requires that the build machine has a user assigned managed identity that can access the KeyVault.
- task: DotNetCoreCLI@2
  displayName: 'Build and run dotnet daemon app'
  condition: and(succeeded(), eq(variables['PipelineType'], 'Legacy'))
  inputs:
    command: run
    feedsToUse: 'config'
    nugetConfigPath: NuGet.config
    projects: '$(IdWebSourceDir)tests\DevApps\daemon-app\Daemon-app\Daemon-app.csproj'
    arguments: '-f net7.0'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    failOnAlert: true
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'High'
