# template-pack-and-sign-all-nugets.yaml
# Pack and sign all nuget packages needed for our builds

parameters:
  BuildConfiguration: 'release'
  NugetPackagesWildcard: '$(Build.ArtifactStagingDirectory)\packages\*.nupkg'

steps:

# The signing task requires dotnet core 2.x
- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 2.x'
  inputs:
    version: 2.x

- task: onebranch.pipeline.signing@1
  displayName: 'Sign ${{ parameters.LibraryName }} with OneBranch'
  inputs:
    command: 'sign'
    signing_profile: 'external_distribution' #CP-230012 -> https://eng.ms/docs/products/onebranch/signing/containerbuildsigning#signing-using-onebranchpipelinesigning-ado-task
    files_to_sign: '**\*Microsoft.Identity.Web*.dll'
    search_root: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src'
  condition: and(succeeded(), eq(variables['PipelineType'], 'OneBranch'))

- task: BinSkim@4
  inputs:
    InputType: Basic
    AnalyzeTargetGlob: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\**\bin\**\Microsoft.Identity.Web*.dll'
    AnalyzeVerbose: true
    AnalyzeHashes: true
    toolVersion: Exact

- task: PostAnalysis@2
  displayName: 'Check BinSkim Results'
  inputs:
    GdnBreakGdnToolBinSkim: true    

# Pack Microsoft.Identity.Web
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web'
    AssemblyName: 'Microsoft.Identity.Web'

# Pack Microsoft.Identity.Web.UI
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.UI'
    AssemblyName: 'Microsoft.Identity.Web.UI*'

# Pack Microsoft.Identity.Web.MicrosoftGraph
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.MicrosoftGraph'
    AssemblyName: 'Microsoft.Identity.Web.MicrosoftGraph*'

# Pack Microsoft.Identity.Web.MicrosoftGraphBeta
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.MicrosoftGraphBeta'
    AssemblyName: 'Microsoft.Identity.Web.MicrosoftGraphBeta*'

# Pack Microsoft.Identity.Web.GraphServiceClient
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.GraphServiceClient'
    AssemblyName: 'Microsoft.Identity.Web.GraphServiceClient*'

# Pack Microsoft.Identity.Web.GraphServiceClientBeta
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.GraphServiceClientBeta'
    AssemblyName: 'Microsoft.Identity.Web.GraphServiceClientBeta*'

# Pack Microsoft.Identity.Web.TokenCache
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.TokenCache'
    AssemblyName: 'Microsoft.Identity.Web.TokenCache*'

# Pack Microsoft.Identity.Web.TokenAcquisition
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.TokenAcquisition'
    AssemblyName: 'Microsoft.Identity.Web.TokenAcquisition*'

# Pack Microsoft.Identity.Web.Certificate
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.Certificate'
    AssemblyName: 'Microsoft.Identity.Web.Certificate*'

# Pack Microsoft.Identity.Web.Certificateless
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.Certificateless'
    AssemblyName: 'Microsoft.Identity.Web.Certificateless*'

# Pack Microsoft.Identity.Web.OWIN
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.OWIN'
    AssemblyName: 'Microsoft.Identity.Web.OWIN*'

# Pack Microsoft.Identity.Web.DownstreamApi
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.DownstreamApi'
    AssemblyName: 'Microsoft.Identity.Web.DownstreamApi*'

# Pack Microsoft.Identity.Web.Diagnostics
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.Diagnostics'
    AssemblyName: 'Microsoft.Identity.Web.Diagnostics*'

# Pack Microsoft.Identity.Web.Diagnostics
- template: template-pack-nuget.yaml
  parameters:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ProjectRootPath: '$(Build.SourcesDirectory)\$(IdWebSourceDir)src\Microsoft.Identity.Web.Azure'
    AssemblyName: 'Microsoft.Identity.Web.Azure*'

# Copy all packages out to staging
- task: CopyFiles@2
  displayName: 'Copy Files from $(Build.SourcesDirectory) to: $(Build.ArtifactStagingDirectory)\packages'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\*nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\packages'
    flattenFolders: true

- task: onebranch.pipeline.signing@1
  displayName: 'Sign Packages with OneBranch'
  inputs:
    command: 'sign'
    signing_profile: 'CP-401405'
    files_to_sign: '*nupkg'
    search_root: '$(Build.ArtifactStagingDirectory)\packages'
  condition: and(succeeded(), eq(variables['PipelineType'], 'OneBranch'))
