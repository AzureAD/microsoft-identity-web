@page "/agent-identity-call-api-app"
@using client.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AgentIdentityModel
@using System.Text.Json
@inject AgentIdentityService AgentIdentityService
@inject ApiService ApiService
@inject ILogger<InteractiveAgent> Logger
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@attribute [Authorize]

<PageTitle>Agent Identity Call APIs</PageTitle>

<h1>Call APIs Using Agent Identity</h1>
<p class="text-muted">This page allows you to call an Agent application API that calls downstream APIs on behalf of agent identity.</p>

<div class="card mb-4">
    <div class="card-header">Select Agent Identity</div>
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label">Agent Identity:</label>
            <select class="form-select" @bind="selectedIdentityId">
                <option value="">-- Select an agent identity --</option>
                @if (identities != null)
                {
                    @foreach (var identity in identities.Where(i => !string.IsNullOrEmpty(i.id)))
                    {
                        <option value="@identity.id">@identity.displayName (@identity.id)</option>
                    }
                }
            </select>
        </div>
        
        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="CallApiWithAgentIdentity" 
                    disabled="@(string.IsNullOrEmpty(selectedIdentityId) || isLoading)">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Calling API...</span>
                }
                else
                {
                    <span class="oi oi-external-link" aria-hidden="true"></span>
                    <span> Call Microsoft Graph API</span>
                }
            </button>

         
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">
        <h5>Error</h5>
        <p>@error</p>
        @if (!string.IsNullOrEmpty(errorDetails))
        {
            <pre class="mt-3 p-3 bg-dark text-white rounded"><code>@errorDetails</code></pre>
        }
    </div>
}

@if (apiResponse != null && apiResponse.Success)
{
    <div class="card mb-4">
        <div class="card-header">
            API Call Results
        </div>
        <div class="card-body">
            @if (apiResponse.AdditionalData.Any())
            {
                <div class="mt-4">
                    <h5>Data</h5>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <tbody>
                                @foreach (var item in apiResponse.AdditionalData)
                                {
                                    <tr>
                                        <th style="width: 200px">@item.Key</th>
                                        <td>@item.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="mt-4">
                <h5>Response Message</h5>
                <div class="alert alert-success">
                    @apiResponse.Message
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AgentIdentity>? identities;
    private string selectedIdentityId = string.Empty;
    private bool isLoading = false;
    private string error = string.Empty;
    private string errorDetails = string.Empty;
    private ApiCallResponse? apiResponse;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAgentIdentities();
        }
        catch (MicrosoftIdentityWebChallengeUserException ex)
        {
            ConsentHandler.HandleException(ex);
        }
        catch (Exception ex)
        {
            error = $"Error initializing page: {ex.Message}";
            Logger.LogError(ex, "Error initializing page");
        }
    }

    private async Task LoadAgentIdentities()
    {
        try
        {
            identities = await AgentIdentityService.GetAgentIdentitiesAsync();
        }
        catch (Exception ex)
        {
            error = $"Error loading agent identities: {ex.Message}";
            Logger.LogError(ex, "Error loading agent identities");
        }
    }

    private async Task CallApiWithAgentIdentity()
    {
        if (string.IsNullOrEmpty(selectedIdentityId))
            return;

        isLoading = true;
        error = string.Empty;
        errorDetails = string.Empty;
        apiResponse = null;
        StateHasChanged();

        try
        {
            // Call the API to get data using the agent identity
            apiResponse = await ApiService.CallApiOnBehalfOfAppAsync(selectedIdentityId);
            
            if (!apiResponse.Success)
            {
                error = apiResponse.Message;
                errorDetails = apiResponse.Error;
            }
        }
        catch (MicrosoftIdentityWebChallengeUserException ex)
        {
            ConsentHandler.HandleException(ex);
        }
        catch (Exception ex)
        {
            error = $"Error calling API: {ex.Message}";
            errorDetails = ex.ToString();
            Logger.LogError(ex, "Error calling API with agent identity {AgentIdentityId}", selectedIdentityId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}