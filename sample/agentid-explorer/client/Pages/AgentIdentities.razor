@page "/agent-identities"
@using client.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AgentIdentityModel
@inject AgentIdentityService AgentIdentityService
@inject ILogger<AgentIdentities> Logger
@inject IJSRuntime JSRuntime
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IConfiguration Configuration
@attribute [Authorize]

<PageTitle>Agent Identities</PageTitle>

<h1>Manage Agent Identities</h1>
<p class="text-muted">This page allows you to manage agent identities for your agent application.</p>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Create New Agent Identity
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Agent Identity Display Name" 
                           @bind="newIdentityName" @bind:event="oninput" />
                    <button class="btn btn-primary" @onclick="CreateAgentIdentity" disabled="@(string.IsNullOrWhiteSpace(newIdentityName) || isCreating)">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Creating...</span>
                        }
                        else
                        {
                            <span>Create</span>
                        }
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-2">@error</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-2">@successMessage</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Agent Identities</span>
        <button class="btn btn-sm btn-outline-primary" @onclick="LoadAgentIdentities">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Loading...</span>
            }
            else
            {
                <span class="oi oi-reload" aria-hidden="true"></span>
                <span> Refresh</span>
            }
        </button>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (identities == null || !identities.Any())
        {
            <div class="alert alert-info">No agent identities found for the current agent application.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Display Name</th>
                            <th>Agent App ID</th>
                            <th>Identity ID</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var identity in identities)
                        {
                            <tr>
                                <td>@identity.displayName</td>
                                <td><code>@(identity.agentAppId ?? "N/A")</code></td>
                                <td><code>@(identity.id ?? "N/A")</code></td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(identity)" 
                                                disabled="@(string.IsNullOrEmpty(identity.id) || isDeleting)">
                                            @if (isDeleting && deletingId == identity.id)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span> Deleting...</span>
                                            }
                                            else
                                            {
                                                <span class="oi oi-trash" aria-hidden="true"></span>
                                                <span> Delete</span>
                                            }
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        Request Admin Consent
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label">Select Agent Identity:</label>
            <select class="form-select" @bind="selectedIdentityId">
                <option value="">-- Select an agent identity --</option>
                @if (identities != null)
                {
                    @foreach (var identity in identities.Where(i => !string.IsNullOrEmpty(i.id)))
                    {
                        <option value="@identity.id">@identity.displayName (@identity.id)</option>
                    }
                }
            </select>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Scope to Request:</label>
            <select class="form-select" @bind="selectedScope">
                <option value="User.Read">User.Read</option>
                <option value="User.ReadBasic.All">User.ReadBasic.All</option>
                <option value="Mail.Read">Mail.Read</option>
                <option value="Calendars.Read">Calendars.Read</option>
                <option value="Files.Read">Files.Read</option>
                <option value="custom">Custom scope...</option>
            </select>
        </div>
        
        @if (selectedScope == "custom")
        {
            <div class="mb-3">
                <label class="form-label">Custom Scope:</label>
                <input type="text" class="form-control" placeholder="Enter custom scope (e.g., api://myapi/access)" 
                       @bind="customScope" @bind:event="oninput" />
            </div>
        }

        <div class="mb-3">
            <label class="form-label">Tenant Domain:</label>
            <input type="text" class="form-control" placeholder="e.g., contoso.onmicrosoft.com" 
                   @bind="tenantDomain" @bind:event="oninput" />
        </div>
        
        <div class="mb-3">
            <label class="form-label">Redirect URI:</label>
            <input type="text" class="form-control" @bind="redirectUri" readonly />
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="GenerateAdminConsentUrl" 
                    disabled="@(string.IsNullOrEmpty(selectedIdentityId) || 
                              (selectedScope == "custom" && string.IsNullOrEmpty(customScope)) ||
                              string.IsNullOrEmpty(tenantDomain))">
                Generate Admin Consent URL
            </button>
            
            @if (!string.IsNullOrEmpty(adminConsentUrl))
            {
                <button class="btn btn-success" @onclick="OpenAdminConsentUrl">
                    <span class="oi oi-external-link" aria-hidden="true"></span> Open URL
                </button>
                
                <button class="btn btn-outline-primary" @onclick="CopyAdminConsentUrl">
                    <span class="oi oi-clipboard" aria-hidden="true"></span> Copy URL
                </button>
            }
        </div>
        
        @if (!string.IsNullOrEmpty(adminConsentUrl))
        {
            <div class="mt-3">
                <div class="form-group">
                    <label class="form-label">Admin Consent URL:</label>
                    <textarea class="form-control" rows="4" readonly>@adminConsentUrl</textarea>
                </div>
                <div class="form-text text-muted mt-2">
                    <p>Use this URL to request admin consent for the selected agent identity. 
                    An administrator can visit this URL to grant consent on behalf of the entire organization.</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    // Properties for managing identities
    private List<AgentIdentity>? identities;
    private bool isLoading = true;
    private bool isCreating = false;
    private bool isDeleting = false;
    private string? deletingId = null;
    private string newIdentityName = string.Empty;
    private string error = string.Empty;
    private string successMessage = string.Empty;

    // Admin Consent properties
    private string selectedIdentityId = string.Empty;
    private string selectedScope = "User.Read";
    private string customScope = string.Empty;
    private string? tenantDomain;
    private string redirectUri = "https://entra.microsoft.com/TokenAuthorize";
    private string adminConsentUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAgentIdentities();
            tenantDomain = Configuration.GetValue<string>("AzureAd:TenantId");
        }
        catch (MicrosoftIdentityWebChallengeUserException ex)
        {
            ConsentHandler.HandleException(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAgentIdentities()
    {
        isLoading = true;
        error = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            identities = await AgentIdentityService.GetAgentIdentitiesAsync();
        }
        catch (Exception ex)
        {
            error = $"Error loading agent identities: {ex.Message}";
            Logger.LogError(ex, "Error loading agent identities");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateAgentIdentity()
    {
        if (string.IsNullOrWhiteSpace(newIdentityName))
            return;

        error = string.Empty;
        successMessage = string.Empty;
        isCreating = true;
        StateHasChanged();
        
        try
        {
            var identity = await AgentIdentityService.CreateAgentIdentityAsync(newIdentityName);
            successMessage = $"Successfully created agent identity '{identity.displayName}'";
            newIdentityName = string.Empty;
            await LoadAgentIdentities();
        }
        catch (Exception ex)
        {
            error = $"Failed to create agent identity: {ex.Message}";
            Logger.LogError(ex, "Failed to create agent identity");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete(AgentIdentity identity)
    {
        if (string.IsNullOrEmpty(identity.id))
        {
            error = "Cannot delete identity with null ID";
            return;
        }

        error = string.Empty;
        successMessage = string.Empty;
        
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the agent identity '{identity.displayName}'?");
        
        if (confirmed)
        {
            await DeleteAgentIdentity(identity);
        }
    }

    private async Task DeleteAgentIdentity(AgentIdentity identity)
    {
        if (string.IsNullOrEmpty(identity.id))
        {
            error = "Cannot delete identity with null ID";
            return;
        }

        isDeleting = true;
        deletingId = identity.id;
        StateHasChanged();
        
        try
        {
            var result = await AgentIdentityService.DeleteAgentIdentityAsync(identity.id);
            successMessage = $"Successfully deleted agent identity '{identity.displayName}'";
            await LoadAgentIdentities();
        }
        catch (MicrosoftIdentityWebChallengeUserException ex)
        {
            ConsentHandler.HandleException(ex);
        }
        catch (Exception ex)
        {
            error = $"Failed to delete agent identity: {ex.Message}";
            Logger.LogError(ex, "Failed to delete agent identity");
        }
        finally
        {
            isDeleting = false;
            deletingId = null;
            StateHasChanged();
        }
    }
    
    // Admin consent URL generation methods
    private void GenerateAdminConsentUrl()
    {
        error = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            string scope = selectedScope == "custom" ? customScope : selectedScope;
            string state = $"1234";
            
            adminConsentUrl = $"https://login.microsoftonline.com/{tenantDomain}/v2.0/adminconsent" +
                $"?client_id={selectedIdentityId}" +
                $"&scope={Uri.EscapeDataString(scope)}" +
                $"&redirect_uri={Uri.EscapeDataString(redirectUri)}" +
                $"&state={state}&dc=ESTS-PUB-SCUS-FD000-TEST1-100";
                
            successMessage = "Admin consent URL generated successfully. You can now copy or open the URL.";
        }
        catch (Exception ex)
        {
            error = $"Failed to generate admin consent URL: {ex.Message}";
            Logger.LogError(ex, "Failed to generate admin consent URL");
        }
    }
    
    private async Task OpenAdminConsentUrl()
    {
        if (string.IsNullOrEmpty(adminConsentUrl))
            return;
            
        await JSRuntime.InvokeVoidAsync("open", adminConsentUrl, "_blank");
    }
    
    private async Task CopyAdminConsentUrl()
    {
        if (string.IsNullOrEmpty(adminConsentUrl))
            return;
            
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", adminConsentUrl);
        successMessage = "Admin consent URL copied to clipboard";
        StateHasChanged();
    }
}
